============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-6.2.3, py-1.10.0, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/tmp_amd/kamen/export/kamen/3/cs1531/automark/tempstore/.hypothesis/examples')
rootdir: /tmp_amd/kamen/export/kamen/3/cs1531/automark/tempstore, configfile: pytest.ini
plugins: forked-1.3.0, xdist-2.2.1, hypothesis-6.1.1, timeout-1.4.2
collecting ... collected 111 items

http_tests/auth_http_test.py::test_auth_register_invalid_email_http PASSED [  0%]
http_tests/auth_http_test.py::test_auth_register_duplicate_email_http PASSED [  1%]
http_tests/auth_http_test.py::test_auth_register_pwd_length_http PASSED  [  2%]
http_tests/auth_http_test.py::test_auth_register_firstName_length_http PASSED [  3%]
http_tests/auth_http_test.py::test_auth_register_lastName_length_http PASSED [  4%]
http_tests/auth_http_test.py::test_auth_login_invalid_email_http PASSED  [  5%]
http_tests/auth_http_test.py::test_auth_login_not_registered_email_http PASSED [  6%]
http_tests/auth_http_test.py::test_auth_login_wrong_password_http PASSED [  7%]
http_tests/auth_http_test.py::test_auth_logout_invalid_token_http FAILED [  8%]
http_tests/auth_http_test.py::test_auth_logout_successfully_http FAILED  [  9%]
http_tests/auth_http_test.py::test_for_request_and_reset_password PASSED [  9%]
http_tests/auth_http_test.py::test_auth_register_invalid_email_http PASSED [  9%]
http_tests/auth_http_test.py::test_auth_register_duplicate_email_http PASSED [  9%]
http_tests/auth_http_test.py::test_auth_register_pwd_length_http PASSED  [  9%]
http_tests/auth_http_test.py::test_auth_register_firstName_length_http PASSED [  9%]
http_tests/auth_http_test.py::test_auth_register_lastName_length_http PASSED [  9%]
http_tests/auth_http_test.py::test_auth_login_invalid_email_http PASSED  [  9%]
http_tests/auth_http_test.py::test_auth_login_not_registered_email_http PASSED [  9%]
http_tests/auth_http_test.py::test_auth_login_wrong_password_http PASSED [  9%]
http_tests/auth_http_test.py::test_auth_logout_invalid_token_http FAILED [  9%]
http_tests/auth_http_test.py::test_auth_logout_successfully_http FAILED  [  9%]
http_tests/auth_http_test.py::test_for_request_and_reset_password PASSED [  9%]
http_tests/channel_channels_http_test.py::test_channel_invite_invalid_channel_http PASSED [ 10%]
http_tests/channel_channels_http_test.py::test_channel_invite_invalid_u_id_http PASSED [ 11%]
http_tests/channel_channels_http_test.py::test_channel_invite_unauthorised_user_http PASSED [ 12%]
http_tests/channel_channels_http_test.py::test_channel_invite_invalid_token_http PASSED [ 13%]
http_tests/channel_channels_http_test.py::test_channel_details_invalid_channel_http PASSED [ 14%]
http_tests/channel_channels_http_test.py::test_channel_details_unauthorised_user_http PASSED [ 15%]
http_tests/channel_channels_http_test.py::test_channel_details_invalid_token_http PASSED [ 16%]
http_tests/channel_channels_http_test.py::test_channel_join_invalid_channel_http PASSED [ 17%]
http_tests/channel_channels_http_test.py::test_channel_join_private_channel_http PASSED [ 18%]
http_tests/channel_channels_http_test.py::test_channel_join_invalid_token_http PASSED [ 18%]
http_tests/channel_channels_http_test.py::test_channel_join_global_owner_exception_http PASSED [ 19%]
http_tests/channel_channels_http_test.py::test_channel_addowner_invalid_channel_http PASSED [ 20%]
http_tests/channel_channels_http_test.py::test_channel_addowner_current_owner_http FAILED [ 21%]
http_tests/channel_channels_http_test.py::test_channel_addowner_unauthorised_user_http PASSED [ 22%]
http_tests/channel_channels_http_test.py::test_channel_addowner_invalid_token_http PASSED [ 23%]
http_tests/channel_channels_http_test.py::test_channel_addowner_global_owner_exception_http PASSED [ 24%]
http_tests/channel_channels_http_test.py::test_channel_removeowner_invalid_channel_http PASSED [ 25%]
http_tests/channel_channels_http_test.py::test_channel_removeowner_current_member_http PASSED [ 26%]
http_tests/channel_channels_http_test.py::test_channel_removeowner_only_owner_http PASSED [ 27%]
http_tests/channel_channels_http_test.py::test_channel_removeowner_unauthorised_user_http PASSED [ 27%]
http_tests/channel_channels_http_test.py::test_channel_removeowner_invalid_token_http PASSED [ 28%]
http_tests/channel_channels_http_test.py::test_channel_removeowner_global_owner_exception_http PASSED [ 29%]
http_tests/channel_channels_http_test.py::test_channel_leave_invalid_channel_http PASSED [ 30%]
http_tests/channel_channels_http_test.py::test_channel_leave_unauthorised_user_http PASSED [ 31%]
http_tests/channel_channels_http_test.py::test_channel_leave_invalid_token_http PASSED [ 32%]
http_tests/channel_channels_http_test.py::test_channels_list_invalid_token_http PASSED [ 33%]
http_tests/channel_channels_http_test.py::test_channels_listall_invalid_token_http PASSED [ 34%]
http_tests/channel_channels_http_test.py::test_channels_create_invalid_name_http PASSED [ 35%]
http_tests/channel_channels_http_test.py::test_channels_create_invalid_token_http PASSED [ 36%]
http_tests/channel_channels_http_test.py::test_channel_channels_valid_implementation PASSED [ 36%]
http_tests/dm_http_test.py::test_dm_create_v1_nonexist_invitee_http PASSED [ 37%]
http_tests/dm_http_test.py::test_dm_invite_v1_invaild_uid_http PASSED    [ 38%]
http_tests/dm_http_test.py::test_dm_invite_v1_invaild_dm_id_http FAILED  [ 39%]
http_tests/dm_http_test.py::test_dm_invite_v1_already_user_http FAILED   [ 40%]
http_tests/dm_http_test.py::test_dm_remove_v1_invaild_dm_id_http FAILED  [ 41%]
http_tests/dm_http_test.py::test_dm_remove_v1_incorrect_token_http PASSED [ 42%]
http_tests/dm_http_test.py::test_dm_leave_v1_invaild_dm_id_http FAILED   [ 43%]
http_tests/dm_http_test.py::test_dm_leave_v1_invaild_dm_id_http1 PASSED  [ 44%]
http_tests/dm_http_test.py::test_dm_details_v1_invaild_dm_id_http FAILED [ 45%]
http_tests/dm_http_test.py::test_dm_detail_v1_unauth_user_http PASSED    [ 45%]
http_tests/dm_http_test.py::test_dm_message_v1_invaild_dm_id_http FAILED [ 46%]
http_tests/dm_http_test.py::test_dm_message_v1_invaild_dm_id_http1 PASSED [ 47%]
http_tests/dm_http_test.py::test_dm_message_v1_test_user_not_in_http PASSED [ 48%]
http_tests/dm_http_test.py::test_dm_all_normal_cases_http FAILED         [ 49%]
http_tests/echo_http_test.py::test_echo FAILED                           [ 50%]
http_tests/message_http_test.py::test_message_send_invalid_length_http PASSED [ 51%]
http_tests/message_http_test.py::test_message_send_not_join_http PASSED  [ 52%]
http_tests/message_http_test.py::test_message_edit_deleted_msg_http PASSED [ 53%]
http_tests/message_http_test.py::test_message_edit_accessError PASSED    [ 54%]
http_tests/message_http_test.py::test_message_remove_invalid_msg_id FAILED [ 54%]
http_tests/message_http_test.py::test_message_remove_accessError PASSED  [ 55%]
http_tests/message_http_test.py::test_message_share_not_join_http PASSED [ 56%]
http_tests/message_http_test.py::test_message_senddm_invalid_length_http FAILED [ 57%]
http_tests/message_http_test.py::test_message_senddm_not_join_http PASSED [ 58%]
http_tests/message_http_test.py::test_message_valid_http FAILED          [ 59%]
http_tests/message_http_test.py::test_message_sendlater FAILED           [ 60%]
http_tests/message_http_test.py::test_message_sendlaterdm FAILED         [ 61%]
http_tests/message_http_test.py::test_message_react FAILED               [ 62%]
http_tests/message_http_test.py::test_message_unreact FAILED             [ 63%]
http_tests/message_http_test.py::test_message_pin FAILED                 [ 63%]
http_tests/message_http_test.py::test_message_unpin FAILED               [ 64%]
http_tests/other_http_test.py::test_clear PASSED                         [ 65%]
http_tests/other_http_test.py::test_search_invalid_length PASSED         [ 66%]
http_tests/other_http_test.py::test_search_valid FAILED                  [ 67%]
http_tests/other_http_test.py::test_notification PASSED                  [ 68%]
http_tests/standup_http_test.py::test_standup_start FAILED               [ 69%]
http_tests/standup_http_test.py::test_standup_active FAILED              [ 70%]
http_tests/standup_http_test.py::test_standup_send FAILED                [ 71%]
http_tests/user_http_test.py::test_user_profile_v1_inputError_http PASSED [ 72%]
http_tests/user_http_test.py::test_user_profile_v1_accessError_http PASSED [ 72%]
http_tests/user_http_test.py::test_user_profile_setname_nameFirst_inputError_http PASSED [ 73%]
http_tests/user_http_test.py::test_user_profile_setname_nameLast_inputError_http PASSED [ 74%]
http_tests/user_http_test.py::test_user_profile_setemail_invalid_email_http PASSED [ 75%]
http_tests/user_http_test.py::test_user_profile_setemail_duplicate_email_http PASSED [ 76%]
http_tests/user_http_test.py::test_user_profile_sethandle_invalid_length_http PASSED [ 77%]
http_tests/user_http_test.py::test_user_profile_sethandle_duplicate_handle_http PASSED [ 78%]
http_tests/user_http_test.py::test_admin_user_remover_only_owner_error_http PASSED [ 79%]
http_tests/user_http_test.py::test_admin_user_remover_invalid_uid_http PASSED [ 80%]
http_tests/user_http_test.py::test_admin_user_remover_accessError_http PASSED [ 81%]
http_tests/user_http_test.py::test_admin_user_permission_invalid_uid_http PASSED [ 81%]
http_tests/user_http_test.py::test_admin_user_permission_invalid_permission_http PASSED [ 82%]
http_tests/user_http_test.py::test_admin_user_permission_change_accessError_http PASSED [ 83%]
http_tests/user_http_test.py::test_user_profile_setname_valid_http PASSED [ 84%]
http_tests/user_http_test.py::test_user_profile_setemail_valid_http PASSED [ 85%]
http_tests/user_http_test.py::test_user_profile_sethandle_valid_http PASSED [ 86%]
http_tests/user_http_test.py::test_users_all_admin_remove_user_valid FAILED [ 87%]
http_tests/user_http_test.py::test_admin_user_permission_change_invalid_http PASSED [ 88%]
http_tests/user_http_test.py::test_user_stats FAILED                     [ 89%]
http_tests/user_http_test.py::test_users_stats_v1 FAILED                 [ 90%]

=================================== FAILURES ===================================
_____________________ test_auth_logout_invalid_token_http ______________________

parameters = {'email': 'haha@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}

    def test_auth_logout_invalid_token_http(parameters):
        requests.delete(config.url + 'clear/v1')
        resp = requests.post(config.url + 'auth/register/v2', json=parameters)
        token = json.loads(resp.text).get('token')
        invalid_token = f"{token}123"
        resp = requests.post(config.url + 'auth/logout/v1', json={"token": invalid_token})
>       assert json.loads(resp.text).get('is_success') is False

http_tests/auth_http_test.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.7/json/__init__.py:348: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.7/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7ff37b3534e0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Not logged in bro</p>\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.7/json/decoder.py:355: JSONDecodeError
______________________ test_auth_logout_successfully_http ______________________

parameters = {'email': 'haha@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}

    def test_auth_logout_successfully_http(parameters):
        requests.delete(config.url + 'clear/v1')
        resp = requests.post(config.url + 'auth/register/v2', json=parameters)
        parameters2 = {
            "email": "haha@gmail.com",
            "password": "123iwuiused"
        }
        resp2 = requests.post(config.url + 'auth/login/v2', json=parameters2)
        auth_user_id0 = json.loads(resp.text).get('auth_user_id')
        auth_user_id1 = json.loads(resp2.text).get('auth_user_id')
        token0 = json.loads(resp.text).get('token')
        token1 = json.loads(resp2.text).get('token')
>       assert auth_user_id0 == 0
E       assert 9 == 0
E         +9
E         -0

http_tests/auth_http_test.py:172: AssertionError
_____________________ test_auth_logout_invalid_token_http ______________________

parameters = {'email': 'haha@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}

    def test_auth_logout_invalid_token_http(parameters):
        requests.delete(config.url + 'clear/v1')
        resp = requests.post(config.url + 'auth/register/v2', json=parameters)
        token = json.loads(resp.text).get('token')
        invalid_token = f"{token}123"
        resp = requests.post(config.url + 'auth/logout/v1', json={"token": invalid_token})
>       assert json.loads(resp.text).get('is_success') is False

http_tests/auth_http_test.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.7/json/__init__.py:348: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.7/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7ff37b3534e0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>403 Forbidden</title>\n<h1>Forbidden</h1>\n<p>Not logged in bro</p>\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.7/json/decoder.py:355: JSONDecodeError
______________________ test_auth_logout_successfully_http ______________________

parameters = {'email': 'haha@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}

    def test_auth_logout_successfully_http(parameters):
        requests.delete(config.url + 'clear/v1')
        resp = requests.post(config.url + 'auth/register/v2', json=parameters)
        parameters2 = {
            "email": "haha@gmail.com",
            "password": "123iwuiused"
        }
        resp2 = requests.post(config.url + 'auth/login/v2', json=parameters2)
        auth_user_id0 = json.loads(resp.text).get('auth_user_id')
        auth_user_id1 = json.loads(resp2.text).get('auth_user_id')
        token0 = json.loads(resp.text).get('token')
        token1 = json.loads(resp2.text).get('token')
>       assert auth_user_id0 == 0
E       assert 20 == 0
E         +20
E         -0

http_tests/auth_http_test.py:172: AssertionError
___________________ test_channel_addowner_current_owner_http ___________________

user1 = {'email': 'haha@gmail.com', 'name_first': 'Peter', 'name_last': 'White', 'password': '123123123'}
user2 = {'email': 'test@testexample.com', 'name_first': 'Tom', 'name_last': 'Green', 'password': 'wp01^#$dp1o23'}

    def test_channel_addowner_current_owner_http(user1,user2):
        requests.delete(config.url + 'clear/v1')
        requests.post(config.url + 'auth/register/v2', json=user1)
        requests.post(config.url + 'auth/register/v2', json=user2)
        user1_login = requests.post(config.url + 'auth/login/v2', json=user1)
        user2_login = requests.post(config.url + 'auth/login/v2', json=user2)
        token1 = json.loads(user1_login.text).get('token')
        token2 = json.loads(user2_login.text).get('token')
        u_id2 = json.loads(user2_login.text).get('auth_user_id')
        channel = requests.post(config.url + 'channels/create/v2', json={"token":token1,"name":"channelone","is_public":True})
        channel_id = json.loads(channel.text).get('channel_id')
        requests.post(config.url + 'channels/join/v2', json={"token":token2,"channel_id":channel_id})
        requests.post(config.url + 'channel/addowner/v2', json={"token":token1,"channel_id":channel_id,"u_id":u_id2})
        output = requests.post(config.url + 'channel/addowner/v1', json={"token":token1,"channel_id":channel_id,"u_id":u_id2}).status_code
>       assert output == 400
E       assert 200 == 400
E         +200
E         -400

http_tests/channel_channels_http_test.py:272: AssertionError
_____________________ test_dm_invite_v1_invaild_dm_id_http _____________________

parameters0 = {'email': 'ZhengRogerLuo@gmail.com', 'name_first': 'Aheng', 'name_last': 'Luo', 'password': 'TrimesterIsTheBest2021!'}
parameters1 = {'email': 'z5206267@gmail.com', 'name_first': 'Roger', 'name_last': 'Luo', 'password': 'IHateSemester2019!'}
parameters2 = {'email': 'hahahaah2@gmail.com', 'name_first': 'James', 'name_last': 'Brown', 'password': 'IHateSemester2020!'}

    def test_dm_invite_v1_invaild_dm_id_http(parameters0, parameters1, parameters2):
        requests.delete(config.url + 'clear/v1')
        # Create(register) two users: user0 and user1.
        user0 = requests.post(config.url + 'auth/register/v2', json=parameters0)
        user1 = requests.post(config.url + 'auth/register/v2', json=parameters1)
        user2 = requests.post(config.url + 'auth/register/v2', json=parameters2)
        # Obtain tokens based on registered users.
        token0 = json.loads(user0.text).get('token')
        u_id_1 = json.loads(user1.text).get('auth_user_id')
        u_id_2 = json.loads(user2.text).get('auth_user_id')
        input0 = {
            'token': token0,
            'u_ids': [u_id_1]
        }
        requests.post(config.url + 'dm/create/v1', json=input0)
        incorrect_input = {
            'token': token0,
            'dm_id': 'incorrect_dm_id',
            'u_id': u_id_2
        }
        status = requests.post(config.url + 'dm/invite/v1', json=incorrect_input).status_code
>       assert status == 400
E       assert 500 == 400
E         +500
E         -400

http_tests/dm_http_test.py:156: AssertionError
_____________________ test_dm_invite_v1_already_user_http ______________________

parameters0 = {'email': 'ZhengRogerLuo@gmail.com', 'name_first': 'Aheng', 'name_last': 'Luo', 'password': 'TrimesterIsTheBest2021!'}
parameters1 = {'email': 'z5206267@gmail.com', 'name_first': 'Roger', 'name_last': 'Luo', 'password': 'IHateSemester2019!'}

    def test_dm_invite_v1_already_user_http(parameters0, parameters1):
        requests.delete(config.url + 'clear/v1')
        # Create(register) two users: user0 and user1.
        user0 = requests.post(config.url + 'auth/register/v2', json=parameters0)
        user1 = requests.post(config.url + 'auth/register/v2', json=parameters1)
        # Obtain tokens based on registered users.
        token0 = json.loads(user0.text).get('token')
        u_id_1 = json.loads(user1.text).get('auth_user_id')
        input0 = {
            'token': token0,
            'u_ids': [u_id_1]
        }
        dm_info = requests.post(config.url + 'dm/create/v1', json=input0)
        dm_id = json.loads(dm_info.text).get('dm_id')
        incorrect_input = {
            'token': token0,
            'dm_id': dm_id,
            'u_id': u_id_1
        }
        status = requests.post(config.url + 'dm/invite/v1', json=incorrect_input).status_code
>       assert status == 403
E       assert 400 == 403
E         +400
E         -403

http_tests/dm_http_test.py:180: AssertionError
_____________________ test_dm_remove_v1_invaild_dm_id_http _____________________

parameters0 = {'email': 'ZhengRogerLuo@gmail.com', 'name_first': 'Aheng', 'name_last': 'Luo', 'password': 'TrimesterIsTheBest2021!'}
parameters1 = {'email': 'z5206267@gmail.com', 'name_first': 'Roger', 'name_last': 'Luo', 'password': 'IHateSemester2019!'}

    def test_dm_remove_v1_invaild_dm_id_http(parameters0, parameters1):
        requests.delete(config.url + 'clear/v1')
        user0 = requests.post(config.url + 'auth/register/v2', json=parameters0)
        user1 = requests.post(config.url + 'auth/register/v2', json=parameters1)
        # Obtain tokens based on registered users.
        token0 = json.loads(user0.text).get('token')
        u_id_1 = json.loads(user1.text).get('auth_user_id')
        input0 = {
            'token': token0,
            'u_ids': [u_id_1]
        }
        requests.post(config.url + 'dm/create/v1', json=input0)
        incorrect_input = {
            'token': token0,
            'dm_id': 'incorrect_value'
        }
        status = requests.delete(config.url + 'dm/remove/v1', json=incorrect_input).status_code
>       assert status == 400
E       assert 500 == 400
E         +500
E         -400

http_tests/dm_http_test.py:227: AssertionError
_____________________ test_dm_leave_v1_invaild_dm_id_http ______________________

parameters0 = {'email': 'ZhengRogerLuo@gmail.com', 'name_first': 'Aheng', 'name_last': 'Luo', 'password': 'TrimesterIsTheBest2021!'}
parameters1 = {'email': 'z5206267@gmail.com', 'name_first': 'Roger', 'name_last': 'Luo', 'password': 'IHateSemester2019!'}

    def test_dm_leave_v1_invaild_dm_id_http(parameters0, parameters1):
        requests.delete(config.url + 'clear/v1')
        user0 = requests.post(config.url + 'auth/register/v2', json=parameters0)
        user1 = requests.post(config.url + 'auth/register/v2', json=parameters1)
        # Obtain tokens based on registered users.
        token0 = json.loads(user0.text).get('token')
        u_id_1 = json.loads(user1.text).get('auth_user_id')
        input0 = {
            'token': token0,
            'u_ids': [u_id_1]
        }
        requests.post(config.url + 'dm/create/v1', json=input0)
        incorrect_input = {
            'token': token0,
            'dm_id': "invalid_dm_id"
        }
        status = requests.post(config.url + 'dm/leave/v1', json=incorrect_input).status_code
>       assert status == 400
E       assert 500 == 400
E         +500
E         -400

http_tests/dm_http_test.py:297: AssertionError
____________________ test_dm_details_v1_invaild_dm_id_http _____________________

parameters0 = {'email': 'ZhengRogerLuo@gmail.com', 'name_first': 'Aheng', 'name_last': 'Luo', 'password': 'TrimesterIsTheBest2021!'}
parameters1 = {'email': 'z5206267@gmail.com', 'name_first': 'Roger', 'name_last': 'Luo', 'password': 'IHateSemester2019!'}

    def test_dm_details_v1_invaild_dm_id_http(parameters0, parameters1):
        requests.delete(config.url + 'clear/v1')
        user0 = requests.post(config.url + 'auth/register/v2', json=parameters0)
        user1 = requests.post(config.url + 'auth/register/v2', json=parameters1)
        # Obtain tokens based on registered users.
        token0 = json.loads(user0.text).get('token')
        u_id_1 = json.loads(user1.text).get('auth_user_id')
        input0 = {
            'token': token0,
            'u_ids': [u_id_1]
        }
        assert requests.post(config.url + 'dm/create/v1', json=input0).status_code == 200
        status = requests.get(config.url + 'dm/details/v1?token=' + token0 + '&dm_id=invalid_token').status_code
>       assert status == 400
E       assert 500 == 400
E         +500
E         -400

http_tests/dm_http_test.py:365: AssertionError
____________________ test_dm_message_v1_invaild_dm_id_http _____________________

parameters0 = {'email': 'ZhengRogerLuo@gmail.com', 'name_first': 'Aheng', 'name_last': 'Luo', 'password': 'TrimesterIsTheBest2021!'}

    def test_dm_message_v1_invaild_dm_id_http(parameters0):
        requests.delete(config.url + 'clear/v1')
        user0 = requests.post(config.url + 'auth/register/v2', json=parameters0)
        # Obtain tokens based on registered users.
        token0 = json.loads(user0.text).get('token')
        status = requests.get(config.url + 'dm/messages/v1?token=' + token0 + '&dm_id=invalid_dm_id&start=0').status_code
>       assert status == 400
E       assert 500 == 400
E         +500
E         -400

http_tests/dm_http_test.py:443: AssertionError
________________________ test_dm_all_normal_cases_http _________________________

parameters0 = {'email': 'ZhengRogerLuo@gmail.com', 'name_first': 'Aheng', 'name_last': 'Luo', 'password': 'TrimesterIsTheBest2021!'}
parameters1 = {'email': 'z5206267@gmail.com', 'name_first': 'Roger', 'name_last': 'Luo', 'password': 'IHateSemester2019!'}
parameters2 = {'email': 'hahahaah2@gmail.com', 'name_first': 'James', 'name_last': 'Brown', 'password': 'IHateSemester2020!'}

    def test_dm_all_normal_cases_http(parameters0, parameters1, parameters2):
        requests.delete(config.url + 'clear/v1')
        user0 = requests.post(config.url + 'auth/register/v2', json=parameters0)
        user1 = requests.post(config.url + 'auth/register/v2', json=parameters1)
        user2 = requests.post(config.url + 'auth/register/v2', json=parameters2)
        # Obtain tokens based on registered users.
        token0 = json.loads(user0.text).get('token')
        token1 = json.loads(user1.text).get('token')
        token2 = json.loads(user2.text).get('token')
>       assert token0 == "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uSUQiOjB9.luCeqtVJ2ZTm-XXyKAY1xjityV36gZLvOCArCwam1rU"
E       AssertionError: assert 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE1MCwibG9naW5fdGltZSI6MTYxODkzNjQwOSwic2FsdCI6ImM0ZGVmNmJiLWNhMDYtNGYyZS1hZGNiLThmYjI5OWRmMGFlOSJ9._dGnOrApnK-KKvja2abZeWnTDLINce-pcWcpbhVgV_I' == 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uSUQiOjB9.luCeqtVJ2ZTm-XXyKAY1xjityV36gZLvOCArCwam1rU'
E         - eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzZXNzaW9uSUQiOjB9.luCeqtVJ2ZTm-XXyKAY1xjityV36gZLvOCArCwam1rU
E         + eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJnaWQiOjE1MCwibG9naW5fdGltZSI6MTYxODkzNjQwOSwic2FsdCI6ImM0ZGVmNmJiLWNhMDYtNGYyZS1hZGNiLThmYjI5OWRmMGFlOSJ9._dGnOrApnK-KKvja2abZeWnTDLINce-pcWcpbhVgV_I

http_tests/dm_http_test.py:500: AssertionError
__________________________________ test_echo ___________________________________

    def test_echo():
        """
        A simple test to check echo
        """
        resp = requests.get(config.url + 'echo', params={'data': 'hello'})
>       assert json.loads(resp.text) == {'data': 'hello'}

http_tests/echo_http_test.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.7/json/__init__.py:348: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.7/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7ff37b3534e0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.7/json/decoder.py:355: JSONDecodeError
______________________ test_message_remove_invalid_msg_id ______________________

parameters = {'email': 'haha@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}

    def test_message_remove_invalid_msg_id(parameters):
        requests.delete(config.url + "clear/v1")
        user = requests.post(config.url + "auth/register/v2", json=parameters)
        token = json.loads(user.text).get("token")
        json_input1 = {"token": token, "name": "channel0", "is_public": True}
        requests.post(config.url + "channels/create/v2", json=json_input1)
    
        json_input2 = {"token": token, "message_id": "haha"}
        status = requests.delete(config.url + "message/remove/v1", json=json_input2).status_code
>       assert status == 400
E       assert 500 == 400
E         +500
E         -400

http_tests/message_http_test.py:129: AssertionError
___________________ test_message_senddm_invalid_length_http ____________________

parameters = {'email': 'haha@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}

    def test_message_senddm_invalid_length_http(parameters):
        requests.delete(config.url + "clear/v1")
        user0 = requests.post(config.url + "auth/register/v2", json=parameters)
        token0 = json.loads(user0.text).get("token")
        user1 = requests.post(config.url + "auth/register/v2", json=parameters)
>       uid1 = json.loads(user1.text).get("auth_user_id")

http_tests/message_http_test.py:191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.7/json/__init__.py:348: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.7/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7ff37b3534e0>
s = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">\n<title>400 Bad Request</title>\n<h1>Bad Request</h1>\n<p>haha@gmail.com already taken</p>\n'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.7/json/decoder.py:355: JSONDecodeError
___________________________ test_message_valid_http ____________________________

parameters = {'email': 'haha@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters1 = {'email': 'haha1@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters2 = {'email': 'haha2@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}

    def test_message_valid_http(parameters, parameters1, parameters2):
        requests.delete(config.url + "clear/v1")
        user0 = requests.post(config.url + "auth/register/v2", json=parameters)
        token0 = json.loads(user0.text).get("token")
        user1 = requests.post(config.url + "auth/register/v2", json=parameters1)
        uid1 = json.loads(user1.text).get("auth_user_id")
        user2 = requests.post(config.url + "auth/register/v2", json=parameters2)
        token2 = json.loads(user2.text).get("token")
    
        # create a dm, users in dm are user0, 1
        json_input1 = {"token": token0, "u_ids": [uid1]}
        dm = requests.post(config.url + "dm/create/v1", json=json_input1)
        dm_id = json.loads(dm.text).get("dm_id")
    
        # create a channel by user2
        json_input2 = {"token": token2, "name": "channel0", "is_public": True}
        channel = requests.post(config.url + "channels/create/v2", json=json_input2)
        channel_id = json.loads(channel.text).get("channel_id")
    
        # send a message to the dm
        json_input3 = {"token": token0, "dm_id": dm_id, "message": "haha0"}
        requests.post(config.url + "message/senddm/v1", json=json_input3)
    
        # check the message in the dm
        dm_msg = requests.get(config.url + "dm/messages/v1?token=" + token0 + "&dm_id=" + str(dm_id) + "&start=0")
        dm_msg = json.loads(dm_msg.text).get("messages")[0]
        assert dm_msg["message"] == "haha0"
        message_id = dm_msg["message_id"]
    
        # edit the message in the dm
        # check the edited message in the dm
        json_input7 = {"token": token0, "message_id": message_id, "message": "haha1"}
        requests.put(config.url + "message/edit/v2", json=json_input7)
        dm_msg = requests.get(config.url + "dm/messages/v1?token=" + token0 + "&dm_id=" + str(dm_id) + "&start=0")
        dm_msg = json.loads(dm_msg.text).get("messages")[0]
        assert dm_msg["message"] == "haha1"
    
        # remove the message in the dm
        json_input8 = {"token": token0, "message_id": message_id}
        requests.delete(config.url + "message/remove/v1", json=json_input8)
        # check that the message has been removed
        dm_msg = requests.get(config.url + "dm/messages/v1?token=" + token0 + "&dm_id=" + str(dm_id) + "&start=0")
        dm_msg = json.loads(dm_msg.text).get("messages")
        assert len(dm_msg) == 0
    
        # send 60 messages to the channel
        for _i in range(60):
            json_input4 = {"token": token2, "channel_id": channel_id, "message": f"good{_i}"}
            requests.post(config.url + "message/send/v2", json=json_input4)
    
        # check if the message are sent successfully
        channel_msg = requests.get(config.url + "channel/messages/v2?token=" + token2 + "&channel_id=" + str(channel_id) + "&start=5")
        channel_msg = json.loads(channel_msg.text)
        message_list = channel_msg.get("messages")
        start = channel_msg.get("start")
        end = channel_msg.get("end")
        assert message_list[0]["message"] == "good54"
        assert len(message_list) == 50
        assert start == 5
        assert end == 55
    
        # share the first message in the channel to the dm
        json_input9 = {"token": token0, "og_message_id": 1, "message": "this is comment", "channel_id": -1, "dm_id": 0}
>       assert requests.post(config.url + "message/share/v1", json=json_input9).status_code == 200
E       assert 400 == 200
E         +400
E         -200

http_tests/message_http_test.py:294: AssertionError
____________________________ test_message_sendlater ____________________________

parameters = {'email': 'haha@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters1 = {'email': 'haha1@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters2 = {'email': 'haha2@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}

    def test_message_sendlater(parameters, parameters1, parameters2):
        requests.delete(config.url + "clear/v1")
        user0 = requests.post(config.url + "auth/register/v2", json=parameters)
        user1 = requests.post(config.url + "auth/register/v2", json=parameters1)
        user2 = requests.post(config.url + "auth/register/v2", json=parameters2)
    
        token_0 = json.loads(user0.text).get("token")
        json.loads(user1.text).get("token")
        token_2 = json.loads(user2.text).get("token")
    
        json.loads(user0.text).get("auth_user_id")
        u_id_1 = json.loads(user1.text).get("auth_user_id")
        json.loads(user2.text).get("auth_user_id")
    
        channel = requests.post(config.url + "channels/create/v2", json={"token": token_0, "name": "channel_0", "is_public": True})
        channel_0_id = json.loads(channel.text).get("channel_id")
        requests.post(config.url + "channel/invite/v2", json={"token": token_0, "channel_id": channel_0_id, "u_id": u_id_1})
    
        time_sent = int(datetime.utcnow().replace(tzinfo=timezone.utc).timestamp()) + 1
    
        def test_invalid_token():
            input1 = {"token": "string token", "channel_id": channel_0_id, "message": "I am message.", "time_sent": time_sent}
            input2 = {"token": 111000, "channel_id": channel_0_id, "message": "I am message.", "time_sent": time_sent}
            input3 = {"token": None, "channel_id": channel_0_id, "message": "I am message.", "time_sent": time_sent}
    
            status1 = requests.post(config.url + "message/sendlater/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/sendlater/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/sendlater/v1", json=input3).status_code
    
            assert status1 == 403
            assert status2 == 403
            assert status3 == 403
    
        def test_invalid_channel_id():
            input1 = {"token": token_0, "channel_id": "invalid channel_id", "message": "I am message.", "time_sent": time_sent}
            input2 = {"token": token_0, "channel_id": 99999, "message": "I am message.", "time_sent": time_sent}
            input3 = {"token": token_0, "channel_id": None, "message": "I am message.", "time_sent": time_sent}
    
            status1 = requests.post(config.url + "message/sendlater/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/sendlater/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/sendlater/v1", json=input3).status_code
    
            assert status1 == 400
            assert status2 == 400
            assert status3 == 400
    
        def test_invalid_message():
            input1 = {"token": token_0, "channel_id": channel_0_id, "message": 123456, "time_sent": time_sent}
            input2 = {"token": token_0, "channel_id": channel_0_id, "message": "a" * 2000, "time_sent": time_sent}
            input3 = {"token": token_0, "channel_id": channel_0_id, "message": None, "time_sent": time_sent}
    
            status1 = requests.post(config.url + "message/sendlater/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/sendlater/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/sendlater/v1", json=input3).status_code
    
            assert status1 == 400
            assert status2 == 400
            assert status3 == 400
    
        def test_invalid_time_sent():
            past_time_sent = datetime(1999, 1, 2).replace(tzinfo=timezone.utc).timestamp()
            input1 = {"token": token_0, "channel_id": channel_0_id, "message": "I am message.", "time_sent": "string time_sent"}
            input2 = {"token": token_0, "channel_id": channel_0_id, "message": "I am message.", "time_sent": 123456}
            input3 = {"token": token_0, "channel_id": channel_0_id, "message": "I am message.", "time_sent": None}
            input4 = {"token": token_0, "channel_id": channel_0_id, "message": "I am message.", "time_sent": past_time_sent}
    
            status1 = requests.post(config.url + "message/sendlater/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/sendlater/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/sendlater/v1", json=input3).status_code
            status4 = requests.post(config.url + "message/sendlater/v1", json=input4).status_code
    
            assert status1 == 400
            assert status2 == 400
            assert status3 == 400
            assert status4 == 400
    
        def test_user_isnot_member_of_channel():
            input1 = {"token": token_2, "channel_id": channel_0_id, "message": "I am message.", "time_sent": time_sent}
    
            status1 = requests.post(config.url + "message/sendlater/v1", json=input1).status_code
    
            assert status1 == 403
    
        # ----------------------------testing------------------------------------
        # InputError Tests
>       test_invalid_channel_id()

http_tests/message_http_test.py:394: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def test_invalid_channel_id():
        input1 = {"token": token_0, "channel_id": "invalid channel_id", "message": "I am message.", "time_sent": time_sent}
        input2 = {"token": token_0, "channel_id": 99999, "message": "I am message.", "time_sent": time_sent}
        input3 = {"token": token_0, "channel_id": None, "message": "I am message.", "time_sent": time_sent}
    
        status1 = requests.post(config.url + "message/sendlater/v1", json=input1).status_code
        status2 = requests.post(config.url + "message/sendlater/v1", json=input2).status_code
        status3 = requests.post(config.url + "message/sendlater/v1", json=input3).status_code
    
>       assert status1 == 400
E       assert 500 == 400
E         +500
E         -400

http_tests/message_http_test.py:351: AssertionError
___________________________ test_message_sendlaterdm ___________________________

parameters = {'email': 'haha@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters1 = {'email': 'haha1@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters2 = {'email': 'haha2@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}

    def test_message_sendlaterdm(parameters, parameters1, parameters2):
        requests.delete(config.url + "clear/v1")
        user0 = requests.post(config.url + "auth/register/v2", json=parameters)
        user1 = requests.post(config.url + "auth/register/v2", json=parameters1)
        user2 = requests.post(config.url + "auth/register/v2", json=parameters2)
    
        token_0 = json.loads(user0.text).get("token")
        json.loads(user1.text).get("token")
        token_2 = json.loads(user2.text).get("token")
    
        json.loads(user0.text).get("auth_user_id")
        u_id_1 = json.loads(user1.text).get("auth_user_id")
        json.loads(user2.text).get("auth_user_id")
    
        dm = requests.post(config.url + "dm/create/v1", json={"token": token_0, "u_ids": [u_id_1]})
        dm_0_id = json.loads(dm.text).get("dm_id")
    
        time_sent = int(datetime.utcnow().replace(tzinfo=timezone.utc).timestamp()) + 5
    
        def test_invalid_token():
            input1 = {"token": "string token", "dm_id": dm_0_id, "message": "I am message.", "time_sent": time_sent}
            input2 = {"token": 111000, "dm_id": dm_0_id, "message": "I am message.", "time_sent": time_sent}
            input3 = {"token": None, "dm_id": dm_0_id, "message": "I am message.", "time_sent": time_sent}
    
            status1 = requests.post(config.url + "message/sendlaterdm/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/sendlaterdm/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/sendlaterdm/v1", json=input3).status_code
    
            assert status1 == 403
            assert status2 == 403
            assert status3 == 403
    
        def test_invalid_dm_id():
            input1 = {"token": token_0, "dm_id": "invalid channel_id", "message": "I am message.", "time_sent": time_sent}
            input2 = {"token": token_0, "dm_id": 99999, "message": "I am message.", "time_sent": time_sent}
            input3 = {"token": token_0, "dm_id": None, "message": "I am message.", "time_sent": time_sent}
    
            status1 = requests.post(config.url + "message/sendlaterdm/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/sendlaterdm/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/sendlaterdm/v1", json=input3).status_code
    
            assert status1 == 400
            assert status2 == 400
            assert status3 == 400
    
        def test_invalid_message():
            input1 = {"token": token_0, "dm_id": dm_0_id, "message": 123456, "time_sent": time_sent}
            input2 = {"token": token_0, "dm_id": dm_0_id, "message": "a" * 2000, "time_sent": time_sent}
            input3 = {"token": token_0, "dm_id": dm_0_id, "message": None, "time_sent": time_sent}
    
            status1 = requests.post(config.url + "message/sendlaterdm/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/sendlaterdm/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/sendlaterdm/v1", json=input3).status_code
    
            assert status1 == 400
            assert status2 == 400
            assert status3 == 400
    
        def test_invalid_time_sent():
            past_time_sent = datetime(1999, 1, 2).replace(tzinfo=timezone.utc).timestamp()
            input1 = {"token": token_0, "dm_id": dm_0_id, "message": "I am message.", "time_sent": "string time_sent"}
            input2 = {"token": token_0, "dm_id": dm_0_id, "message": "I am message.", "time_sent": 123456}
            input3 = {"token": token_0, "dm_id": dm_0_id, "message": "I am message.", "time_sent": None}
            input4 = {"token": token_0, "dm_id": dm_0_id, "message": "I am message.", "time_sent": past_time_sent}
    
            status1 = requests.post(config.url + "message/sendlaterdm/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/sendlaterdm/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/sendlaterdm/v1", json=input3).status_code
            status4 = requests.post(config.url + "message/sendlaterdm/v1", json=input4).status_code
    
            assert status1 == 400
            assert status2 == 400
            assert status3 == 400
            assert status4 == 400
    
        def test_user_isnot_member_of_dm():
            input1 = {"token": token_2, "dm_id": dm_0_id, "message": "I am message.", "time_sent": time_sent}
    
            status1 = requests.post(config.url + "message/sendlaterdm/v1", json=input1).status_code
    
            assert status1 == 403
    
        # ----------------------------testing------------------------------------
        # InputError Tests
>       test_invalid_dm_id()

http_tests/message_http_test.py:493: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def test_invalid_dm_id():
        input1 = {"token": token_0, "dm_id": "invalid channel_id", "message": "I am message.", "time_sent": time_sent}
        input2 = {"token": token_0, "dm_id": 99999, "message": "I am message.", "time_sent": time_sent}
        input3 = {"token": token_0, "dm_id": None, "message": "I am message.", "time_sent": time_sent}
    
        status1 = requests.post(config.url + "message/sendlaterdm/v1", json=input1).status_code
        status2 = requests.post(config.url + "message/sendlaterdm/v1", json=input2).status_code
        status3 = requests.post(config.url + "message/sendlaterdm/v1", json=input3).status_code
    
>       assert status1 == 400
E       assert 500 == 400
E         +500
E         -400

http_tests/message_http_test.py:450: AssertionError
______________________________ test_message_react ______________________________

parameters = {'email': 'haha@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters1 = {'email': 'haha1@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters2 = {'email': 'haha2@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}

    def test_message_react(parameters, parameters1, parameters2):
        requests.delete(config.url + "clear/v1")
        user0 = requests.post(config.url + "auth/register/v2", json=parameters)
        user1 = requests.post(config.url + "auth/register/v2", json=parameters1)
        user2 = requests.post(config.url + "auth/register/v2", json=parameters2)
    
        token_0 = json.loads(user0.text).get("token")
        json.loads(user1.text).get("token")
        token_2 = json.loads(user2.text).get("token")
    
        json.loads(user0.text).get("auth_user_id")
        u_id_1 = json.loads(user1.text).get("auth_user_id")
        json.loads(user2.text).get("auth_user_id")
    
        dm = requests.post(config.url + "dm/create/v1", json={"token": token_0, "u_ids": [u_id_1]})
        dm_0_id = json.loads(dm.text).get("dm_id")
        channel = requests.post(config.url + "channels/create/v2", json={"token": token_0, "name": "channel_0", "is_public": True})
        channel_0_id = json.loads(channel.text).get("channel_id")
    
        requests.post(config.url + "channel/invite/v2", json={"token": token_0, "channel_id": channel_0_id, "u_id": u_id_1})
    
        dm_message_0 = requests.post(config.url + "message/senddm/v1", json={"token": token_0, "dm_id": dm_0_id, "message": "I am message."})
        dm_message_0_message_id = json.loads(dm_message_0.text).get("message_id")
        dm_message_1 = requests.post(config.url + "message/senddm/v1", json={"token": token_0, "dm_id": dm_0_id, "message": "@first1last1 I am message."})
        dm_message_1_message_id = json.loads(dm_message_1.text).get("message_id")
    
        channel_message_0 = requests.post(config.url + "message/send/v2", json={"token": token_0, "channel_id": channel_0_id, "message": "I am message."})
        channel_message_0_message_id = json.loads(channel_message_0.text).get("message_id")
        channel_message_1 = requests.post(config.url + "message/send/v2", json={"token": token_0, "channel_id": channel_0_id, "message": "@first0last0 I am messag."})
        channel_message_1_message_id = json.loads(channel_message_1.text).get("message_id")
    
        def test_invalid_token():
            input1 = {"token": "string token", "message_id": dm_message_0_message_id, "react_id": 1}
            input2 = {"token": 111000, "message_id": dm_message_0_message_id, "react_id": 1}
            input3 = {"token": None, "message_id": dm_message_0_message_id, "react_id": 1}
    
            status1 = requests.post(config.url + "message/react/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/react/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/react/v1", json=input3).status_code
    
            assert status1 == 403
            assert status2 == 403
            assert status3 == 403
    
        def test_invalid_message_id():
            input1 = {"token": token_0, "message_id": "string message_id", "react_id": 1}
            input2 = {"token": token_0, "message_id": 99999999, "react_id": 1}
            input3 = {"token": token_0, "message_id": None, "react_id": 1}
    
            status1 = requests.post(config.url + "message/react/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/react/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/react/v1", json=input3).status_code
    
            assert status1 == 400
            assert status2 == 400
            assert status3 == 400
    
        def test_invalid_react_id():
            input1 = {"token": token_0, "message_id": dm_message_0_message_id, "react_id": "string react_id"}
            input2 = {"token": token_0, "message_id": dm_message_0_message_id, "react_id": 9999}
            input3 = {"token": token_0, "message_id": dm_message_0_message_id, "react_id": None}
    
            status1 = requests.post(config.url + "message/react/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/react/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/react/v1", json=input3).status_code
    
            assert status1 == 400
            assert status2 == 400
            assert status3 == 400
    
        # InputError : React_id is already contained in the message
    
        def test_react_id_already_in_message():
            input1 = {"token": token_0, "message_id": dm_message_0_message_id, "react_id": 1}
            input2 = {"token": token_0, "message_id": dm_message_0_message_id, "react_id": 1}
            input3 = {"token": token_0, "message_id": dm_message_0_message_id, "react_id": 1}
    
            status1 = requests.post(config.url + "message/react/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/react/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/unreact/v1", json=input3).status_code
    
            assert status1 == 200
            assert status2 == 403
            assert status3 == 200
    
        # AccessError: The authorised user is not a member of the channel or DM
    
        def test_user_isnot_member_of_channel():
            input1 = {"token": token_2, "message_id": channel_message_0_message_id, "react_id": 1}
            input2 = {"token": token_2, "message_id": channel_message_1_message_id, "react_id": 1}
    
            status1 = requests.post(config.url + "message/react/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/react/v1", json=input2).status_code
    
            assert status1 == 403
            assert status2 == 403
    
        def test_user_isnot_member_of_dm():
            input1 = {"token": token_2, "message_id": dm_message_0_message_id, "react_id": 1}
            input2 = {"token": token_2, "message_id": dm_message_1_message_id, "react_id": 1}
    
            status1 = requests.post(config.url + "message/react/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/react/v1", json=input2).status_code
    
            assert status1 == 403
            assert status2 == 403
    
        # ----------------------------testing------------------------------------
        # InputError Tests
>       test_invalid_message_id()

http_tests/message_http_test.py:619: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def test_invalid_message_id():
        input1 = {"token": token_0, "message_id": "string message_id", "react_id": 1}
        input2 = {"token": token_0, "message_id": 99999999, "react_id": 1}
        input3 = {"token": token_0, "message_id": None, "react_id": 1}
    
        status1 = requests.post(config.url + "message/react/v1", json=input1).status_code
        status2 = requests.post(config.url + "message/react/v1", json=input2).status_code
        status3 = requests.post(config.url + "message/react/v1", json=input3).status_code
    
>       assert status1 == 400
E       assert 500 == 400
E         +500
E         -400

http_tests/message_http_test.py:563: AssertionError
_____________________________ test_message_unreact _____________________________

parameters = {'email': 'haha@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters1 = {'email': 'haha1@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters2 = {'email': 'haha2@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}

    def test_message_unreact(parameters, parameters1, parameters2):
        requests.delete(config.url + "clear/v1")
        user0 = requests.post(config.url + "auth/register/v2", json=parameters)
        user1 = requests.post(config.url + "auth/register/v2", json=parameters1)
        user2 = requests.post(config.url + "auth/register/v2", json=parameters2)
    
        token_0 = json.loads(user0.text).get("token")
        json.loads(user1.text).get("token")
        token_2 = json.loads(user2.text).get("token")
    
        json.loads(user0.text).get("auth_user_id")
        u_id_1 = json.loads(user1.text).get("auth_user_id")
        json.loads(user2.text).get("auth_user_id")
    
        dm = requests.post(config.url + "dm/create/v1", json={"token": token_0, "u_ids": [u_id_1]})
        dm_0_id = json.loads(dm.text).get("dm_id")
        channel = requests.post(config.url + "channels/create/v2", json={"token": token_0, "name": "channel_0", "is_public": True})
        channel_0_id = json.loads(channel.text).get("channel_id")
    
        requests.post(config.url + "channel/invite/v2", json={"token": token_0, "channel_id": channel_0_id, "u_id": u_id_1})
    
        dm_message_0 = requests.post(config.url + "message/senddm/v1", json={"token": token_0, "dm_id": dm_0_id, "message": "I am message."})
        dm_message_0_message_id = json.loads(dm_message_0.text).get("message_id")
        dm_message_1 = requests.post(config.url + "message/senddm/v1", json={"token": token_0, "dm_id": dm_0_id, "message": "@first1last1 I am message."})
        dm_message_1_message_id = json.loads(dm_message_1.text).get("message_id")
    
        channel_message_0 = requests.post(config.url + "message/send/v2", json={"token": token_0, "channel_id": channel_0_id, "message": "I am message."})
        channel_message_0_message_id = json.loads(channel_message_0.text).get("message_id")
        channel_message_1 = requests.post(config.url + "message/send/v2", json={"token": token_0, "channel_id": channel_0_id, "message": "@first0last0 I am messag."})
        channel_message_1_message_id = json.loads(channel_message_1.text).get("message_id")
    
        def test_invalid_token():
            input1 = {"token": "string token", "message_id": dm_message_0_message_id, "react_id": 1}
            input2 = {"token": 111000, "message_id": dm_message_0_message_id, "react_id": 1}
            input3 = {"token": None, "message_id": dm_message_0_message_id, "react_id": 1}
    
            status1 = requests.post(config.url + "message/unreact/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/unreact/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/unreact/v1", json=input3).status_code
    
            assert status1 == 403
            assert status2 == 403
            assert status3 == 403
    
        def test_invalid_message_id():
            input1 = {"token": token_0, "message_id": "string message_id", "react_id": 1}
            input2 = {"token": token_0, "message_id": 99999999, "react_id": 1}
            input3 = {"token": token_0, "message_id": None, "react_id": 1}
    
            status1 = requests.post(config.url + "message/unreact/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/unreact/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/unreact/v1", json=input3).status_code
    
            assert status1 == 400
            assert status2 == 400
            assert status3 == 400
    
        def test_invalid_react_id():
            input1 = {"token": token_0, "message_id": dm_message_0_message_id, "react_id": "string react_id"}
            input2 = {"token": token_0, "message_id": dm_message_0_message_id, "react_id": 9999}
            input3 = {"token": token_0, "message_id": dm_message_0_message_id, "react_id": None}
    
            status1 = requests.post(config.url + "message/unreact/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/unreact/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/unreact/v1", json=input3).status_code
    
            assert status1 == 400
            assert status2 == 400
            assert status3 == 400
    
        # InputError : React_id is not contained in the message
    
        def test_react_id_not_in_message():
            input1 = {"token": token_0, "message_id": dm_message_0_message_id, "react_id": 1}
            input2 = {"token": token_0, "message_id": dm_message_0_message_id, "react_id": 1}
            input3 = {"token": token_0, "message_id": dm_message_0_message_id, "react_id": 1}
    
            status1 = requests.post(config.url + "message/react/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/unreact/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/unreact/v1", json=input3).status_code
    
            assert status1 == 200
            assert status2 == 200
            assert status3 == 403
    
        # AccessError: The authorised user is not a member of the channel or DM
    
        def test_user_isnot_member_of_channel():
            input1 = {"token": token_0, "message_id": channel_message_0_message_id, "react_id": 1}
            input2 = {"token": token_0, "message_id": channel_message_1_message_id, "react_id": 1}
            input3 = {"token": token_2, "message_id": channel_message_0_message_id, "react_id": 1}
            input4 = {"token": token_2, "message_id": channel_message_1_message_id, "react_id": 1}
    
            status1 = requests.post(config.url + "message/react/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/react/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/unreact/v1", json=input3).status_code
            status4 = requests.post(config.url + "message/unreact/v1", json=input4).status_code
            status5 = requests.post(config.url + "message/unreact/v1", json=input1).status_code
            status6 = requests.post(config.url + "message/unreact/v1", json=input2).status_code
    
            assert status1 == 200
            assert status2 == 200
            assert status3 == 403
            assert status4 == 403
            assert status5 == 200
            assert status6 == 200
    
        def test_user_isnot_member_of_dm():
            input1 = {"token": token_0, "message_id": dm_message_0_message_id, "react_id": 1}
            input2 = {"token": token_0, "message_id": dm_message_1_message_id, "react_id": 1}
            input3 = {"token": token_2, "message_id": dm_message_0_message_id, "react_id": 1}
            input4 = {"token": token_2, "message_id": dm_message_1_message_id, "react_id": 1}
    
            status1 = requests.post(config.url + "message/react/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/react/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/unreact/v1", json=input3).status_code
            status4 = requests.post(config.url + "message/unreact/v1", json=input4).status_code
            status5 = requests.post(config.url + "message/unreact/v1", json=input1).status_code
            status6 = requests.post(config.url + "message/unreact/v1", json=input2).status_code
    
            assert status1 == 200
            assert status2 == 200
            assert status3 == 403
            assert status4 == 403
            assert status5 == 200
            assert status6 == 200
    
        # ----------------------------testing------------------------------------
        # InputError Tests
>       test_invalid_message_id()

http_tests/message_http_test.py:766: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def test_invalid_message_id():
        input1 = {"token": token_0, "message_id": "string message_id", "react_id": 1}
        input2 = {"token": token_0, "message_id": 99999999, "react_id": 1}
        input3 = {"token": token_0, "message_id": None, "react_id": 1}
    
        status1 = requests.post(config.url + "message/unreact/v1", json=input1).status_code
        status2 = requests.post(config.url + "message/unreact/v1", json=input2).status_code
        status3 = requests.post(config.url + "message/unreact/v1", json=input3).status_code
    
>       assert status1 == 400
E       assert 500 == 400
E         +500
E         -400

http_tests/message_http_test.py:690: AssertionError
_______________________________ test_message_pin _______________________________

parameters = {'email': 'haha@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters1 = {'email': 'haha1@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters2 = {'email': 'haha2@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}

    def test_message_pin(parameters, parameters1, parameters2):
        requests.delete(config.url + "clear/v1")
        user0 = requests.post(config.url + "auth/register/v2", json=parameters)
        user1 = requests.post(config.url + "auth/register/v2", json=parameters1)
        user2 = requests.post(config.url + "auth/register/v2", json=parameters2)
    
        token_0 = json.loads(user0.text).get("token")
        token_1 = json.loads(user1.text).get("token")
        token_2 = json.loads(user2.text).get("token")
    
        json.loads(user0.text).get("auth_user_id")
        u_id_1 = json.loads(user1.text).get("auth_user_id")
        json.loads(user2.text).get("auth_user_id")
    
        dm = requests.post(config.url + "dm/create/v1", json={"token": token_0, "u_ids": [u_id_1]})
        dm_0_id = json.loads(dm.text).get("dm_id")
        channel = requests.post(config.url + "channels/create/v2", json={"token": token_0, "name": "channel_0", "is_public": True})
        channel_0_id = json.loads(channel.text).get("channel_id")
    
        requests.post(config.url + "channel/invite/v2", json={"token": token_0, "channel_id": channel_0_id, "u_id": u_id_1})
    
        dm_message_0 = requests.post(config.url + "message/senddm/v1", json={"token": token_0, "dm_id": dm_0_id, "message": "I am message."})
        dm_message_0_message_id = json.loads(dm_message_0.text).get("message_id")
        requests.post(config.url + "message/senddm/v1", json={"token": token_0, "dm_id": dm_0_id, "message": "@first1last1 I am message."})
        dm_message_1_message_id = json.loads(dm_message_0.text).get("message_id")
    
        requests.post(config.url + "message/send/v2", json={"token": token_0, "channel_id": channel_0_id, "message": "I am message."})
        channel_message_0_message_id = json.loads(dm_message_0.text).get("message_id")
        requests.post(config.url + "message/send/v2", json={"token": token_0, "channel_id": channel_0_id, "message": "@first0last0 I am messag."})
        channel_message_1_message_id = json.loads(dm_message_0.text).get("message_id")
    
        def test_invalid_token():
            input1 = {"token": "string token", "message_id": dm_message_0_message_id}
            input2 = {"token": 111000, "message_id": dm_message_0_message_id}
            input3 = {"token": None, "message_id": dm_message_0_message_id}
    
            status1 = requests.post(config.url + "message/pin/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/pin/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/pin/v1", json=input3).status_code
    
            assert status1 == 403
            assert status2 == 403
            assert status3 == 403
    
        def test_invalid_message_id():
            input1 = {"token": token_0, "message_id": "string message_id"}
            input2 = {"token": token_0, "message_id": 99999999}
            input3 = {"token": token_0, "message_id": None}
    
            status1 = requests.post(config.url + "message/pin/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/pin/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/pin/v1", json=input3).status_code
    
            assert status1 == 400
            assert status2 == 400
            assert status3 == 400
    
        # InputError : Message with ID message_id is already pinned
    
        def test_message_id_already_pinned():
            input1 = {"token": token_0, "message_id": dm_message_0_message_id}
    
            status1 = requests.post(config.url + "message/pin/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/pin/v1", json=input1).status_code
            status3 = requests.post(config.url + "message/unpin/v1", json=input1).status_code
    
            assert status1 == 200
            assert status3 == 200
            assert status2 == 400
    
        # AccessError: The authorised user is not a member of the channel or DM
    
        def test_user_isnot_member_of_channel():
            input1 = {"token": token_2, "message_id": channel_message_0_message_id}
            input2 = {"token": token_2, "message_id": channel_message_1_message_id}
    
            status1 = requests.post(config.url + "message/pin/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/pin/v1", json=input2).status_code
    
            assert status1 == 403
            assert status2 == 403
    
        def test_user_isnot_member_of_dm():
            input1 = {"token": token_2, "message_id": dm_message_0_message_id}
            input2 = {"token": token_2, "message_id": dm_message_1_message_id}
    
            status1 = requests.post(config.url + "message/pin/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/pin/v1", json=input2).status_code
    
            assert status1 == 403
            assert status2 == 403
    
        # AccessError: The authorised user is not an owner of the channel or DM
    
        def test_user_isnot_owner_of_channel():
            input1 = {"token": token_1, "message_id": channel_message_0_message_id}
    
            status1 = requests.post(config.url + "message/pin/v1", json=input1).status_code
    
            assert status1 == 403
    
        def test_user_isnot_owner_of_dm():
            input1 = {"token": token_1, "message_id": dm_message_1_message_id}
    
            status1 = requests.post(config.url + "message/pin/v1", json=input1).status_code
    
            assert status1 == 403
    
        # ----------------------------testing------------------------------------
        # InputError Tests
>       test_invalid_message_id()

http_tests/message_http_test.py:894: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def test_invalid_message_id():
        input1 = {"token": token_0, "message_id": "string message_id"}
        input2 = {"token": token_0, "message_id": 99999999}
        input3 = {"token": token_0, "message_id": None}
    
        status1 = requests.post(config.url + "message/pin/v1", json=input1).status_code
        status2 = requests.post(config.url + "message/pin/v1", json=input2).status_code
        status3 = requests.post(config.url + "message/pin/v1", json=input3).status_code
    
>       assert status1 == 400
E       assert 500 == 400
E         +500
E         -400

http_tests/message_http_test.py:837: AssertionError
______________________________ test_message_unpin ______________________________

parameters = {'email': 'haha@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters1 = {'email': 'haha1@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters2 = {'email': 'haha2@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}

    def test_message_unpin(parameters, parameters1, parameters2):
        requests.delete(config.url + "clear/v1")
        user0 = requests.post(config.url + "auth/register/v2", json=parameters)
        user1 = requests.post(config.url + "auth/register/v2", json=parameters1)
        user2 = requests.post(config.url + "auth/register/v2", json=parameters2)
    
        token_0 = json.loads(user0.text).get("token")
        token_1 = json.loads(user1.text).get("token")
        token_2 = json.loads(user2.text).get("token")
    
        json.loads(user0.text).get("auth_user_id")
        u_id_1 = json.loads(user1.text).get("auth_user_id")
        json.loads(user2.text).get("auth_user_id")
    
        dm = requests.post(config.url + "dm/create/v1", json={"token": token_0, "u_ids": [u_id_1]})
        dm_0_id = json.loads(dm.text).get("dm_id")
        channel = requests.post(config.url + "channels/create/v2", json={"token": token_0, "name": "channel_0", "is_public": True})
        channel_0_id = json.loads(channel.text).get("channel_id")
    
        requests.post(config.url + "channel/invite/v2", json={"token": token_0, "channel_id": channel_0_id, "u_id": u_id_1})
    
        dm_message_0 = requests.post(config.url + "message/senddm/v1", json={"token": token_0, "dm_id": dm_0_id, "message": "I am message."})
        dm_message_0_message_id = json.loads(dm_message_0.text).get("message_id")
        dm_message_1 = requests.post(config.url + "message/senddm/v1", json={"token": token_0, "dm_id": dm_0_id, "message": "@first1last1 I am message."})
        dm_message_1_message_id = json.loads(dm_message_1.text).get("message_id")
    
        channel_message_0 = requests.post(config.url + "message/send/v2", json={"token": token_0, "channel_id": channel_0_id, "message": "I am message."})
        channel_message_0_message_id = json.loads(channel_message_0.text).get("message_id")
        channel_message_1 = requests.post(config.url + "message/send/v2", json={"token": token_0, "channel_id": channel_0_id, "message": "@first0last0 I am messag."})
        channel_message_1_message_id = json.loads(channel_message_1.text).get("message_id")
    
        def test_invalid_token():
            input1 = {"token": "string token", "message_id": dm_message_0_message_id}
            input2 = {"token": 111000, "message_id": dm_message_0_message_id}
            input3 = {"token": None, "message_id": dm_message_0_message_id}
    
            status1 = requests.post(config.url + "message/unpin/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/unpin/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/unpin/v1", json=input3).status_code
    
            assert status1 == 403
            assert status2 == 403
            assert status3 == 403
    
        def test_invalid_message_id():
            input1 = {"token": token_0, "message_id": "string message_id"}
            input2 = {"token": token_0, "message_id": 99999999}
            input3 = {"token": token_0, "message_id": None}
    
            status1 = requests.post(config.url + "message/unpin/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/unpin/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/unpin/v1", json=input3).status_code
    
            assert status1 == 400
            assert status2 == 400
            assert status3 == 400
    
        # InputError : Message with ID message_id is already unpinned
    
        def test_message_id_already_unpinned():
            input1 = {"token": token_0, "message_id": dm_message_0_message_id}
    
            status1 = requests.post(config.url + "message/pin/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/unpin/v1", json=input1).status_code
            status3 = requests.post(config.url + "message/unpin/v1", json=input1).status_code
    
            assert status1 == 200
            assert status2 == 200
            assert status3 == 400
    
        # AccessError: The authorised user is not a member of the channel or DM
    
        def test_user_isnot_member_of_channel():
            input1 = {"token": token_0, "message_id": channel_message_0_message_id}
            input2 = {"token": token_0, "message_id": channel_message_1_message_id}
            input3 = {"token": token_2, "message_id": channel_message_0_message_id}
            input4 = {"token": token_2, "message_id": channel_message_1_message_id}
    
            status1 = requests.post(config.url + "message/pin/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/pin/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/unpin/v1", json=input3).status_code
            status4 = requests.post(config.url + "message/unpin/v1", json=input4).status_code
    
            assert status1 == 200
            assert status2 == 200
            assert status3 == 403
            assert status4 == 403
    
        def test_user_isnot_member_of_dm():
            input1 = {"token": token_0, "message_id": dm_message_0_message_id}
            input2 = {"token": token_0, "message_id": dm_message_1_message_id}
            input3 = {"token": token_2, "message_id": dm_message_0_message_id}
            input4 = {"token": token_2, "message_id": dm_message_1_message_id}
    
            status1 = requests.post(config.url + "message/pin/v1", json=input1).status_code
            status2 = requests.post(config.url + "message/pin/v1", json=input2).status_code
            status3 = requests.post(config.url + "message/unpin/v1", json=input3).status_code
            status4 = requests.post(config.url + "message/unpin/v1", json=input4).status_code
    
            assert status1 == 200
            assert status2 == 200
            assert status3 == 403
            assert status4 == 403
    
        # AccessError: The authorised user is not an owner of the channel or DM
    
        def test_user_isnot_owner_of_channel():
            input1 = {"token": token_1, "message_id": channel_message_0_message_id}
    
            status1 = requests.post(config.url + "message/unpin/v1", json=input1).status_code
    
            assert status1 == 403
    
        def test_user_isnot_owner_of_dm():
            input1 = {"token": token_1, "message_id": dm_message_1_message_id}
    
            status1 = requests.post(config.url + "message/unpin/v1", json=input1).status_code
    
            assert status1 == 403
    
        # ----------------------------testing------------------------------------
        # InputError Tests
>       test_invalid_message_id()

http_tests/message_http_test.py:1036: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def test_invalid_message_id():
        input1 = {"token": token_0, "message_id": "string message_id"}
        input2 = {"token": token_0, "message_id": 99999999}
        input3 = {"token": token_0, "message_id": None}
    
        status1 = requests.post(config.url + "message/unpin/v1", json=input1).status_code
        status2 = requests.post(config.url + "message/unpin/v1", json=input2).status_code
        status3 = requests.post(config.url + "message/unpin/v1", json=input3).status_code
    
>       assert status1 == 400
E       assert 500 == 400
E         +500
E         -400

http_tests/message_http_test.py:967: AssertionError
______________________________ test_search_valid _______________________________

parameters = {'email': 'haha@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters1 = {'email': 'haha1@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}

    def test_search_valid(parameters, parameters1):
        requests.delete(config.url + 'clear/v1')
        user0 = requests.post(config.url + 'auth/register/v2', json=parameters)
        token0 = json.loads(user0.text).get('token')
        user1 = requests.post(config.url + 'auth/register/v2', json=parameters1)
        uid1 = json.loads(user1.text).get('auth_user_id')
        # create a dm, users in dm are user0, 1
        json_input1 = {"token": token0, "u_ids": [uid1]}
        dm = requests.post(config.url + 'dm/create/v1', json=json_input1)
        dm_id = json.loads(dm.text).get('dm_id')
        # send 3 messages to the dm
        json_input3 = {"token": token0, "dm_id": dm_id, "message": "haha0"}
        json_input4 = {"token": token0, "dm_id": dm_id, "message": "you know HAHA"}
        json_input5 = {"token": token0, "dm_id": dm_id, "message": "ha is not invalid"}
        requests.post(config.url + 'message/senddm/v1', json=json_input3)
        requests.post(config.url + 'message/senddm/v1', json=json_input4)
        requests.post(config.url + 'message/senddm/v1', json=json_input5)
    
        message_list = requests.get(config.url + 'search/v2?token=' + token0 + '&query_str=haha')
        message_list = json.loads(message_list.text).get('messages')
        assert message_list[0]['message'] == "haha0"
>       assert message_list[1]['message'] == "you know HAHA"
E       IndexError: list index out of range

http_tests/other_http_test.py:112: IndexError
______________________________ test_standup_start ______________________________

parameters = {'email': 'haha@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters1 = {'email': 'haha1@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters2 = {'email': 'haha2@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}

    def test_standup_start(parameters, parameters1, parameters2):
        requests.delete(config.url + "clear/v1")
        user0 = requests.post(config.url + "auth/register/v2", json=parameters)
        user1 = requests.post(config.url + "auth/register/v2", json=parameters1)
        user2 = requests.post(config.url + "auth/register/v2", json=parameters2)
    
        token_0 = json.loads(user0.text).get("token")
        json.loads(user1.text).get("token")
        token_2 = json.loads(user2.text).get("token")
    
        json.loads(user0.text).get("auth_user_id")
        json.loads(user1.text).get("auth_user_id")
        json.loads(user2.text).get("auth_user_id")
    
        channel_0 = requests.post(config.url + "channels/create/v2", json={"token": token_0, "name": "channel_0", "is_public": True})
        channel_0_id = json.loads(channel_0.text).get("channel_id")
        channel_1 = requests.post(config.url + "channels/create/v2", json={"token": token_0, "name": "channel_1", "is_public": True})
        channel_1_id = json.loads(channel_1.text).get("channel_id")
    
        def test_invalid_token():
            input1 = {"token": "string token", "channel_id": channel_0_id, "length": 10}
            input2 = {"token": 111000, "channel_id": channel_0_id, "length": 10}
            input3 = {"token": None, "channel_id": channel_0_id, "length": 10}
    
            status1 = requests.post(config.url + "standup/start/v1", json=input1).status_code
            status2 = requests.post(config.url + "standup/start/v1", json=input2).status_code
            status3 = requests.post(config.url + "standup/start/v1", json=input3).status_code
    
            assert status1 == 403
            assert status2 == 403
            assert status3 == 403
    
        def test_invalid_channel_id():
            input1 = {"token": token_0, "channel_id": "invalid channel_id", "length": 10}
            input2 = {"token": token_0, "channel_id": 99999, "length": 10}
            input3 = {"token": token_0, "channel_id": None, "length": 10}
    
            status1 = requests.post(config.url + "standup/start/v1", json=input1).status_code
            status2 = requests.post(config.url + "standup/start/v1", json=input2).status_code
            status3 = requests.post(config.url + "standup/start/v1", json=input3).status_code
    
            assert status1 == 400
            assert status2 == 400
            assert status3 == 400
    
        def test_invalid_length():
            input1 = {"token": token_0, "channel_id": channel_0_id, "length": "string length"}
            input2 = {"token": token_0, "channel_id": channel_0_id, "length": -999}
            input3 = {"token": token_0, "channel_id": channel_0_id, "length": None}
    
            status1 = requests.post(config.url + "standup/start/v1", json=input1).status_code
            status2 = requests.post(config.url + "standup/start/v1", json=input2).status_code
            status3 = requests.post(config.url + "standup/start/v1", json=input3).status_code
    
            assert status1 == 400
            assert status2 == 400
            assert status3 == 400
    
        # InputError : An active standup is currently running in this channel
        def test_standup_started_already():
            input1 = {"token": token_0, "channel_id": channel_0_id, "length": 10}
            input2 = {"token": token_0, "channel_id": channel_0_id, "length": 10}
    
            status1 = requests.post(config.url + "standup/start/v1", json=input1).status_code
            status2 = requests.post(config.url + "standup/start/v1", json=input2).status_code
    
            assert status1 == 200
            assert status2 == 400
    
        # AccessError : Authorised user is not in the channel
        def test_user_isnot_member_of_channel():
            input1 = {"token": token_2, "channel_id": channel_0_id, "length": 10}
    
            status1 = requests.post(config.url + "standup/start/v1", json=input1).status_code
    
            assert status1 == 403
    
        # normal tests
        def test_normal_test01():
            time_sent = int(datetime.utcnow().replace(tzinfo=timezone.utc).timestamp())
    
            input1 = {"token": token_0, "channel_id": channel_1_id, "length": 2}
            expected = requests.post(config.url + "standup/start/v1", json=input1)
            time_expected = json.loads(expected.text).get("time_finish")
    
            sleep(2)
    
            time_finish = int(datetime.utcnow().replace(tzinfo=timezone.utc).timestamp())
    
            assert time_expected == time_finish == time_sent + 2
    
        # ----------------------------testing------------------------------------
        test_invalid_token()
>       test_invalid_channel_id()

http_tests/standup_http_test.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def test_invalid_channel_id():
        input1 = {"token": token_0, "channel_id": "invalid channel_id", "length": 10}
        input2 = {"token": token_0, "channel_id": 99999, "length": 10}
        input3 = {"token": token_0, "channel_id": None, "length": 10}
    
        status1 = requests.post(config.url + "standup/start/v1", json=input1).status_code
        status2 = requests.post(config.url + "standup/start/v1", json=input2).status_code
        status3 = requests.post(config.url + "standup/start/v1", json=input3).status_code
    
>       assert status1 == 400
E       assert 500 == 400
E         +500
E         -400

http_tests/standup_http_test.py:88: AssertionError
_____________________________ test_standup_active ______________________________

parameters = {'email': 'haha@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters1 = {'email': 'haha1@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters2 = {'email': 'haha2@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}

    def test_standup_active(parameters, parameters1, parameters2):
        requests.delete(config.url + "clear/v1")
        user0 = requests.post(config.url + "auth/register/v2", json=parameters)
        user1 = requests.post(config.url + "auth/register/v2", json=parameters1)
        user2 = requests.post(config.url + "auth/register/v2", json=parameters2)
    
        token_0 = json.loads(user0.text).get("token")
        json.loads(user1.text).get("token")
        json.loads(user2.text).get("token")
    
        json.loads(user0.text).get("auth_user_id")
        json.loads(user1.text).get("auth_user_id")
        json.loads(user2.text).get("auth_user_id")
    
        channel_0 = requests.post(config.url + "channels/create/v2", json={"token": token_0, "name": "channel_0", "is_public": True})
        channel_0_id = json.loads(channel_0.text).get("channel_id")
        channel_1 = requests.post(config.url + "channels/create/v2", json={"token": token_0, "name": "channel_1", "is_public": True})
        channel_1_id = json.loads(channel_1.text).get("channel_id")
    
        def test_invalid_token():
            input1 = {"token": "string token", "channel_id": channel_0_id}
            input2 = {"token": 111000, "channel_id": channel_0_id}
            input3 = {"token": None, "channel_id": channel_0_id}
    
            status1 = requests.get(config.url + "standup/active/v1", params=input1).status_code
            status2 = requests.get(config.url + "standup/active/v1", params=input2).status_code
            status3 = requests.get(config.url + "standup/active/v1", params=input3).status_code
    
            assert status1 == 403
            assert status2 == 403
            assert status3 == 403
    
        def test_invalid_channel_id():
            input1 = {"token": token_0, "channel_id": "invalid channel_id"}
            input2 = {"token": token_0, "channel_id": 99999}
            input3 = {"token": token_0, "channel_id": None}
    
            status1 = requests.get(config.url + "standup/active/v1", params=input1).status_code
            status2 = requests.get(config.url + "standup/active/v1", params=input2).status_code
            status3 = requests.get(config.url + "standup/active/v1", params=input3).status_code
    
            assert status1 == 400
            assert status2 == 400
            assert status3 == 400
    
        # normal tests
        def test_normal_test01():
            time_sent = int(datetime.utcnow().replace(tzinfo=timezone.utc).timestamp())
    
            input1 = {"token": token_0, "channel_id": channel_0_id, "length": 2}
            input2 = {"token": token_0, "channel_id": channel_1_id, "length": 3}
    
            expected_1 = requests.post(config.url + "standup/start/v1", json=input1)
            expected_2 = requests.post(config.url + "standup/start/v1", json=input2)
    
            time_finish_1 = json.loads(expected_1.text).get("time_finish")
            time_finish_2 = json.loads(expected_2.text).get("time_finish")
    
            input3 = {"token": token_0, "channel_id": channel_0_id}
            input4 = {"token": token_0, "channel_id": channel_1_id}
    
            active_1 = requests.get(config.url + "standup/active/v1", params=input3)
            active_2 = requests.get(config.url + "standup/active/v1", params=input4)
    
            assert json.loads(active_1.text).get("is_active") is True
            assert json.loads(active_1.text).get("time_finish") == time_sent + 2
    
            assert json.loads(active_2.text).get("is_active") is True
            assert json.loads(active_2.text).get("time_finish") == time_sent + 3
    
            sleep(2)
            active_1 = requests.get(config.url + "standup/active/v1", params=input3)
            active_2 = requests.get(config.url + "standup/active/v1", params=input4)
            assert json.loads(active_1.text).get("is_active") is False
            assert json.loads(active_2.text).get("is_active") is True
    
            sleep(1)
            active_1 = requests.get(config.url + "standup/active/v1", params=input3)
            active_2 = requests.get(config.url + "standup/active/v1", params=input4)
            assert json.loads(active_1.text).get("is_active") is False
            assert json.loads(active_2.text).get("is_active") is False
    
            time_finish = int(datetime.utcnow().replace(tzinfo=timezone.utc).timestamp())
    
            assert time_finish_1 + 1 - 2 <= time_finish <= time_finish_1 + 1 + 2
            assert time_finish_2 - 2 <= time_finish <= time_finish_2 + 2
            assert time_sent + 3 - 2 <= time_finish <= time_sent + 3 + 2
        # ----------------------------testing------------------------------------
        test_invalid_token()
>       test_invalid_channel_id()

http_tests/standup_http_test.py:246: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def test_invalid_channel_id():
        input1 = {"token": token_0, "channel_id": "invalid channel_id"}
        input2 = {"token": token_0, "channel_id": 99999}
        input3 = {"token": token_0, "channel_id": None}
    
        status1 = requests.get(config.url + "standup/active/v1", params=input1).status_code
        status2 = requests.get(config.url + "standup/active/v1", params=input2).status_code
        status3 = requests.get(config.url + "standup/active/v1", params=input3).status_code
    
>       assert status1 == 400
E       assert 500 == 400
E         +500
E         -400

http_tests/standup_http_test.py:198: AssertionError
______________________________ test_standup_send _______________________________

parameters = {'email': 'haha@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters1 = {'email': 'haha1@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters2 = {'email': 'haha2@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}

    def test_standup_send(parameters, parameters1, parameters2):
        requests.delete(config.url + "clear/v1")
        user0 = requests.post(config.url + "auth/register/v2", json=parameters)
        user1 = requests.post(config.url + "auth/register/v2", json=parameters1)
        user2 = requests.post(config.url + "auth/register/v2", json=parameters2)
    
        token_0 = json.loads(user0.text).get("token")
        token_1 = json.loads(user1.text).get("token")
        token_2 = json.loads(user2.text).get("token")
    
        json.loads(user0.text).get("auth_user_id")
        u_id_1 = json.loads(user1.text).get("auth_user_id")
        json.loads(user2.text).get("auth_user_id")
    
        channel_0 = requests.post(config.url + "channels/create/v2", json={"token": token_0, "name": "channel_0", "is_public": True})
        channel_0_id = json.loads(channel_0.text).get("channel_id")
    
        requests.post(config.url + "channel/invite/v2", json={"token": token_0, "channel_id": channel_0_id, "u_id": u_id_1})
    
        def test_invalid_token():
            input1 = {"token": "string token", "channel_id": channel_0_id, "message": "I am message."}
            input2 = {"token": 111000, "channel_id": channel_0_id, "message": "I am message."}
            input3 = {"token": None, "channel_id": channel_0_id, "message": "I am message."}
    
            status1 = requests.post(config.url + "standup/send/v1", json=input1).status_code
            status2 = requests.post(config.url + "standup/send/v1", json=input2).status_code
            status3 = requests.post(config.url + "standup/send/v1", json=input3).status_code
    
            assert status1 == 403
            assert status2 == 403
            assert status3 == 403
    
        def test_invalid_channel_id():
            input1 = {"token": token_0, "channel_id": "invalid channel_id", "message": "I am message."}
            input2 = {"token": token_0, "channel_id": 99999, "message": "I am message."}
            input3 = {"token": token_0, "channel_id": None, "message": "I am message."}
    
            status1 = requests.post(config.url + "standup/send/v1", json=input1).status_code
            status2 = requests.post(config.url + "standup/send/v1", json=input2).status_code
            status3 = requests.post(config.url + "standup/send/v1", json=input3).status_code
    
            assert status1 == 400
            assert status2 == 400
            assert status3 == 400
    
        def test_invalid_message():
            input1 = {"token": token_0, "channel_id": channel_0_id, "message": 123456}
            input2 = {"token": token_0, "channel_id": channel_0_id, "message": "a" * 2000}
            input3 = {"token": token_0, "channel_id": channel_0_id, "message": None}
    
            status1 = requests.post(config.url + "standup/send/v1", json=input1).status_code
            status2 = requests.post(config.url + "standup/send/v1", json=input2).status_code
            status3 = requests.post(config.url + "standup/send/v1", json=input3).status_code
    
            assert status1 == 400
            assert status2 == 400
            assert status3 == 400
    
        # InputError : An active standup is not currently running in this channel
        def test_standup_not_started():
            input1 = {"token": token_0, "channel_id": channel_0_id, "message": "I am message."}
    
            status1 = requests.post(config.url + "standup/send/v1", json=input1).status_code
    
            assert status1 == 400
    
        # AccessError : Authorised user is not in the channel
        def test_user_isnot_member_of_channel():
            input1 = {"token": token_2, "channel_id": channel_0_id, "message": "I am message."}
    
            status1 = requests.post(config.url + "standup/send/v1", json=input1).status_code
    
            assert status1 == 403
    
        # normal tests
        def test_normal_test01():
            requests.post(config.url + "standup/start/v1", json={"token": token_0, "channel_id": channel_0_id, "length": 1})
            active_1 = requests.get(config.url + "standup/active/v1", params={"token": token_0, "channel_id": channel_0_id})
            assert json.loads(active_1.text).get("is_active") is True
    
            requests.post(config.url + "standup/send/v1", json={"token": token_0, "channel_id": channel_0_id, "message": "message send by user_0."})
            channel_0_msgs = requests.get(config.url + "channel/messages/v2", params={"token": token_0, "channel_id": channel_0_id, "start": 0})
            assert len(json.loads(channel_0_msgs.text).get("messages")) == 0
    
            requests.post(config.url + "standup/send/v1", json={"token": token_1, "channel_id": channel_0_id, "message": "message send by user_1."})
            channel_0_msgs = requests.get(config.url + "channel/messages/v2", params={"token": token_0, "channel_id": channel_0_id, "start": 0})
            assert len(json.loads(channel_0_msgs.text).get("messages")) == 0
    
            sleep(2)
            active_1 = requests.get(config.url + "standup/active/v1", params={"token": token_0, "channel_id": channel_0_id})
            assert json.loads(active_1.text).get("is_active") is False
            channel_0_msgs = requests.get(config.url + "channel/messages/v2", params={"token": token_0, "channel_id": channel_0_id, "start": 0})
            assert len(json.loads(channel_0_msgs.text).get("messages")) == 1
    
        # ----------------------------testing------------------------------------
        test_invalid_token()
>       test_invalid_channel_id()

http_tests/standup_http_test.py:354: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def test_invalid_channel_id():
        input1 = {"token": token_0, "channel_id": "invalid channel_id", "message": "I am message."}
        input2 = {"token": token_0, "channel_id": 99999, "message": "I am message."}
        input3 = {"token": token_0, "channel_id": None, "message": "I am message."}
    
        status1 = requests.post(config.url + "standup/send/v1", json=input1).status_code
        status2 = requests.post(config.url + "standup/send/v1", json=input2).status_code
        status3 = requests.post(config.url + "standup/send/v1", json=input3).status_code
    
>       assert status1 == 400
E       assert 500 == 400
E         +500
E         -400

http_tests/standup_http_test.py:299: AssertionError
____________________ test_users_all_admin_remove_user_valid ____________________

parameters = {'email': 'haha9@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}

    def test_users_all_admin_remove_user_valid(parameters):
        requests.delete(config.url + 'clear/v1')
        resp = requests.post(config.url + 'auth/register/v2', json=parameters)
        token = json.loads(resp.text).get('token')
        resp_n = None
        for i in range(10):
            parameters['email'] = f"haha{i}@gmail.com"
            resp_n = requests.post(config.url + 'auth/register/v2', json=parameters)
    
        token_n = json.loads(resp_n.text).get('token')
        uid_n = json.loads(resp_n.text).get('auth_user_id')
    
        resp_users_all = requests.get(config.url + 'users/all/v1?token=' + token)
        users_all_list = json.loads(resp_users_all.text)['users']
        assert len(users_all_list) == 11
        status = requests.delete(config.url + 'admin/user/remove/v1', json={'token': token, 'u_id': 10}).status_code
>       assert status == 200
E       assert 400 == 200
E         +400
E         -200

http_tests/user_http_test.py:317: AssertionError
_______________________________ test_user_stats ________________________________

parameters = {'email': 'haha@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters1 = {'email': 'haha1@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}

    def test_user_stats(parameters, parameters1):
        requests.delete(config.url + 'clear/v1')
        user0 = requests.post(config.url + "auth/register/v2", json=parameters)
        user1 = requests.post(config.url + "auth/register/v2", json=parameters1)
        token0 = json.loads(user0.text).get("token")
        token1 = json.loads(user1.text).get("token")
        uid1 = json.loads(user1.text).get("auth_user_id")
    
        def test_zero_involvement_rate():
            user_stat = requests.get(config.url + "user/stats/v1", params={'token': token0})
            rate = json.loads(user_stat.text).get("user_stats")
            assert rate['involvement_rate'] == 0
        # ----------------------------testing------------------------------------
        test_zero_involvement_rate()
        # ------------------------------------------------------------------------
        dm_info = requests.post(config.url + 'dm/create/v1', json={'token': token0, 'u_ids': [uid1]})
        dm_id = json.loads(dm_info.text).get('dm_id')
        channel = requests.post(config.url + 'channels/create/v2',
                                json={"token": token1, "name": "channelone", "is_public": True})
        channel_id = json.loads(channel.text).get('channel_id')
    
        requests.post(config.url + "message/senddm/v1", json={'token': token0, 'dm_id': dm_id, 'message': "haha"})
        for _i in range(2):
            requests.post(config.url + "message/send/v2", json={'token': token1, 'channel_id': channel_id, 'message': "haha"})
    
        def test_invalid_token_user_stats():
            input1 = {"token": "string token"}
            input2 = {"token": 111000}
            input3 = {"token": None}
    
            user_stat0 = requests.get(config.url + "user/stats/v1", params=input1)
            user_stat1 = requests.get(config.url + "user/stats/v1", params=input2)
            user_stat2 = requests.get(config.url + "user/stats/v1", params=input3)
    
            assert user_stat0.status_code == 403
            assert user_stat1.status_code == 403
            assert user_stat2.status_code == 403
    
        def test_valid1():
            user_stat0 = requests.get(config.url + "user/stats/v1", params={'token': token0})
            user0_stats = json.loads(user_stat0.text).get('user_stats')
            user_stat1 = requests.get(config.url + "user/stats/v1", params={'token': token1})
            user1_stats = json.loads(user_stat1.text).get('user_stats')
            assert len(user0_stats['channels_joined']) == 0
            assert len(user0_stats['dms_joined']) == 1
            assert len(user0_stats['messages_sent']) == 1
            assert user0_stats['involvement_rate'] == 2 / 5
            assert len(user1_stats['channels_joined']) == 1
            assert len(user1_stats['dms_joined']) == 1
            assert len(user1_stats['messages_sent']) == 2
            assert user1_stats['involvement_rate'] == 4 / 5
        # ----------------------------testing------------------------------------
        test_invalid_token_user_stats()
>       test_valid1()

http_tests/user_http_test.py:405: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def test_valid1():
        user_stat0 = requests.get(config.url + "user/stats/v1", params={'token': token0})
        user0_stats = json.loads(user_stat0.text).get('user_stats')
        user_stat1 = requests.get(config.url + "user/stats/v1", params={'token': token1})
        user1_stats = json.loads(user_stat1.text).get('user_stats')
>       assert len(user0_stats['channels_joined']) == 0
E       assert 1 == 0
E         +1
E         -0

http_tests/user_http_test.py:395: AssertionError
_____________________________ test_users_stats_v1 ______________________________

parameters = {'email': 'haha@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters1 = {'email': 'haha1@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}
parameters2 = {'email': 'haha2@gmail.com', 'name_first': 'Lan', 'name_last': 'Lin', 'password': '123iwuiused'}

    def test_users_stats_v1(parameters, parameters1, parameters2):
        requests.delete(config.url + 'clear/v1')
        user0 = requests.post(config.url + "auth/register/v2", json=parameters)
        user1 = requests.post(config.url + "auth/register/v2", json=parameters1)
        user2 = requests.post(config.url + "auth/register/v2", json=parameters2)
        token0 = json.loads(user0.text).get("token")
        token1 = json.loads(user1.text).get("token")
        uid1 = json.loads(user1.text).get("auth_user_id")
        uid2 = json.loads(user2.text).get("auth_user_id")
    
        dm_info = requests.post(config.url + 'dm/create/v1', json={'token': token0, 'u_ids': [uid1]})
        dm_id = json.loads(dm_info.text).get('dm_id')
    
        channel = requests.post(config.url + 'channels/create/v2',
                                json={"token": token1, "name": "channelone", "is_public": True})
        channel_id = json.loads(channel.text).get('channel_id')
        requests.post(config.url + 'channels/create/v2',
                      json={"token": token1, "name": "channeltwo", "is_public": True})
    
        requests.post(config.url + "message/senddm/v1", json={'token': token0, 'dm_id': dm_id, 'message': "haha"})
    
        message_id1 = requests.post(config.url + "message/send/v2", json={'token': token1, 'channel_id': channel_id,
                                                                          'message': "haha"})
        message_id1 = json.loads(message_id1.text).get('message_id')
        requests.post(config.url + "message/send/v2", json={'token': token1, 'channel_id': channel_id,
                                                            'message': "haha"})
    
        def test_invalid_token_users_stats():
            input1 = {"token": "string token"}
            input2 = {"token": 111000}
            input3 = {"token": None}
    
            user_stat0 = requests.get(config.url + "users/stats/v1", params=input1)
            user_stat1 = requests.get(config.url + "users/stats/v1", params=input2)
            user_stat2 = requests.get(config.url + "users/stats/v1", params=input3)
    
            assert user_stat0.status_code == 403
            assert user_stat1.status_code == 403
            assert user_stat2.status_code == 403
    
        def test_valid1():
            dreams_stats = requests.get(config.url + "users/stats/v1", params={'token': token0})
            dreams_stats = json.loads(dreams_stats.text)['dreams_stats']
            assert len(dreams_stats['channels_exist']) == 2
            assert len(dreams_stats['dms_exist']) == 1
            assert len(dreams_stats['messages_exist']) == 3
            assert dreams_stats['utilization_rate'] == 2 / 3
        # ----------------------------testing------------------------------------
>       test_invalid_token_users_stats()

http_tests/user_http_test.py:472: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

    def test_invalid_token_users_stats():
        input1 = {"token": "string token"}
        input2 = {"token": 111000}
        input3 = {"token": None}
    
        user_stat0 = requests.get(config.url + "users/stats/v1", params=input1)
        user_stat1 = requests.get(config.url + "users/stats/v1", params=input2)
        user_stat2 = requests.get(config.url + "users/stats/v1", params=input3)
    
>       assert user_stat0.status_code == 403
E       assert 404 == 403
E         +404
E         -403

http_tests/user_http_test.py:460: AssertionError
=========================== short test summary info ============================
FAILED http_tests/auth_http_test.py::test_auth_logout_invalid_token_http - js...
FAILED http_tests/auth_http_test.py::test_auth_logout_successfully_http - ass...
FAILED http_tests/auth_http_test.py::test_auth_logout_invalid_token_http - js...
FAILED http_tests/auth_http_test.py::test_auth_logout_successfully_http - ass...
FAILED http_tests/channel_channels_http_test.py::test_channel_addowner_current_owner_http
FAILED http_tests/dm_http_test.py::test_dm_invite_v1_invaild_dm_id_http - ass...
FAILED http_tests/dm_http_test.py::test_dm_invite_v1_already_user_http - asse...
FAILED http_tests/dm_http_test.py::test_dm_remove_v1_invaild_dm_id_http - ass...
FAILED http_tests/dm_http_test.py::test_dm_leave_v1_invaild_dm_id_http - asse...
FAILED http_tests/dm_http_test.py::test_dm_details_v1_invaild_dm_id_http - as...
FAILED http_tests/dm_http_test.py::test_dm_message_v1_invaild_dm_id_http - as...
FAILED http_tests/dm_http_test.py::test_dm_all_normal_cases_http - AssertionE...
FAILED http_tests/echo_http_test.py::test_echo - json.decoder.JSONDecodeError...
FAILED http_tests/message_http_test.py::test_message_remove_invalid_msg_id - ...
FAILED http_tests/message_http_test.py::test_message_senddm_invalid_length_http
FAILED http_tests/message_http_test.py::test_message_valid_http - assert 400 ...
FAILED http_tests/message_http_test.py::test_message_sendlater - assert 500 =...
FAILED http_tests/message_http_test.py::test_message_sendlaterdm - assert 500...
FAILED http_tests/message_http_test.py::test_message_react - assert 500 == 400
FAILED http_tests/message_http_test.py::test_message_unreact - assert 500 == 400
FAILED http_tests/message_http_test.py::test_message_pin - assert 500 == 400
FAILED http_tests/message_http_test.py::test_message_unpin - assert 500 == 400
FAILED http_tests/other_http_test.py::test_search_valid - IndexError: list in...
FAILED http_tests/standup_http_test.py::test_standup_start - assert 500 == 400
FAILED http_tests/standup_http_test.py::test_standup_active - assert 500 == 400
FAILED http_tests/standup_http_test.py::test_standup_send - assert 500 == 400
FAILED http_tests/user_http_test.py::test_users_all_admin_remove_user_valid
FAILED http_tests/user_http_test.py::test_user_stats - assert 1 == 0
FAILED http_tests/user_http_test.py::test_users_stats_v1 - assert 404 == 403
======================== 29 failed, 82 passed in 15.28s ========================
